//
//  TunnelMonitor.swift
//  TunnelMonitorKit
// 
//  Created by Chris J on 20/03/2022.
//  Copyright Â© 2022 Chris Janusiewicz. Distributed under the MIT License.
//

import Foundation
import NetworkExtension

/// Responsible for communication with the an NEPacketTunnelProvider or NEAppProxyProvider. Continuously sends status
/// update requests to the network extension, such that the extension can use these requests to notify the host app of
/// any changes of state.
open class TunnelMonitor {

    private var session: TMTunnelProviderSession
    private var pollTimer: Timer?

    public init(session: TMTunnelProviderSession) {
        self.session = session
    }

    /// <#Description#>
    /// - Parameter session: <#session description#>
    public func setSession(_ session: TMTunnelProviderSession) {

    }

    /// Starts monitoring the current NETunnelProviderSession using status requests generated by the given request
    /// builder at the specified interval.
    /// - Parameters:
    ///   - requestBuilder: The block responsible for constructing a status request
    ///   - interval: The interval at which to request status updates
    public func startMonitoringSession(
        withRequestBuilder requestBuilder: () -> Codable,
        pollInterval interval: TimeInterval = 1.0
    ) {

    }

    /// Stops requesting status updates
    public func stopMonitoring() {
      pollTimer?.invalidate()
    }

    public func sendMessage<T: Codable>(message: T, responseHandler: ResponseCompletion) {
        guard let message = MessageContainer.make(message: message) else { return }
        do {
            let messageData = try JSONEncoder().encode(message)
            try session.sendProviderMessage(messageData, responseHandler: responseHandler)
        } catch {
            return
        }
    }
}

public class TMTunnelProviderSession {

    func startTunnel(options: [String: Any]?) throws { }

    func stopTunnel() { }

    func sendProviderMessage(_ message: Data, responseHandler: ResponseCompletion) throws { }

}

public class TMTunnelProviderSessionNative: TMTunnelProviderSession {

    private let nativeSession: NETunnelProviderSession

    public init(nativeSession: NETunnelProviderSession) {
        self.nativeSession = nativeSession
    }

    override public func stopTunnel() {
        nativeSession.stopTunnel()
    }

    override public func startTunnel(options: [String: Any]?) throws {
        try nativeSession.startTunnel(options: options)
    }

    override public func sendProviderMessage(_ message: Data, responseHandler: ResponseCompletion) throws {
        try nativeSession.sendProviderMessage(message, responseHandler: responseHandler)
    }
}

public class TMTunnelProviderSessionMock: TMTunnelProviderSession {

}
